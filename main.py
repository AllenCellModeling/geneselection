import json
import os
import importlib
import argparse
import datetime
import subprocess

if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("--save_dir", type=str, default=None, help="save dir")
    parser.add_argument(
        "--save_parent",
        type=str,
        default=None,
        help='parent save directory to save with autogenerated working directory (mutually exclusive to "--save_dir")',
    )
    parser.add_argument(
        "--main_function",
        type=str,
        default=None,
        help="main function to pass kwargs into",
    )

    parser.add_argument(
        "--kwargs_path", type=str, default=None, help="kwargs for the classifier"
    )

    args = vars(parser.parse_args())

    if args["save_parent"] is not None:
        the_time = datetime.datetime.now().strftime("%Y-%m-%d-%H:%M:%S")
        args["save_dir"] = os.path.join(args["save_parent"], the_time)

    if not os.path.exists(args["save_dir"]):
        os.makedirs(args["save_dir"])

    if os.path.exists(args["kwargs_path"]):
        with open(args["kwargs_path"], "rb") as f:
            args["kwargs"] = json.load(f)

    args["git_commit"] = str(subprocess.check_output(["git", "rev-parse", "HEAD"]))

    args_path = "{0}/input.json".format(args["save_dir"])
    with open(args_path, "w") as f:
        json.dump(args, f, indent=4, sort_keys=True)

    if "git_commit" in args:
        args.pop("git_commit")

    # load whatever function you want to run
    main_function = importlib.import_module(args["main_function"])

    args["kwargs"]["save_dir"] = args["save_dir"]

    # run it
    main_function.run(**args["kwargs"])
